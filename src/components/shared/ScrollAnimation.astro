---
// ScrollAnimation.astro
export interface Props {
  animation?:
    | "fadeInUp"
    | "fadeInDown"
    | "fadeInLeft"
    | "fadeInRight"
    | "slideInUp"
    | "slideInDown"
    | "zoomIn"
    | "bounceIn";
  delay?: number | string;
  duration?: number | string;
  threshold?: number;
  rootMargin?: string;
  class?: string;
  triggerOnce?: boolean;
}

const {
  animation = "fadeInUp",
  delay = 0,
  duration = 0.6,
  threshold = 0.1,
  rootMargin = "0px 0px -50px 0px",
  class: className = "",
  triggerOnce = true,
} = Astro.props;

// Generar ID único para este componente
const uniqueId = `scroll-animate-${Math.random().toString(36).substr(2, 9)}`;

// Convertir delay a formato CSS
const formatDelay = (delay: number | string): string => {
  if (typeof delay === "number") {
    return `${delay}s`;
  }
  return delay.toString().includes("s") ? delay.toString() : `${delay}s`;
};

// Convertir duration a formato CSS
const formatDuration = (duration: number | string): string => {
  if (typeof duration === "number") {
    return `${duration}s`;
  }
  return duration.toString().includes("s")
    ? duration.toString()
    : `${duration}s`;
};
---

<div
  id={uniqueId}
  class={`scroll-animate ${className}`}
  data-animation={animation}
  data-delay={formatDelay(delay)}
  data-duration={formatDuration(duration)}
  data-threshold={threshold}
  data-root-margin={rootMargin}
  data-trigger-once={triggerOnce}
>
  <slot />
</div>

<style>
.scroll-animate {
  opacity: 0;
  transition: opacity 0.3s ease;
  will-change: transform, opacity;
  overflow-wrap: break-word;
}


  .scroll-animate.animate {
    opacity: 1 !important;
    animation-timing-function: ease-out;
    animation-fill-mode: both;
  }

  /* Animaciones */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fadeInDown {
    from {
      opacity: 0;
      transform: translateY(-30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fadeInLeft {
    from {
      opacity: 0;
      transform: translateX(-50px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes fadeInRight {
    from {
      opacity: 0;
      transform: translateX(50px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes slideInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes slideInDown {
    from {
      opacity: 0;
      transform: translateY(-100%);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes zoomIn {
    from {
      opacity: 0;
      transform: scale(0.8);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  @keyframes bounceIn {
    0% {
      opacity: 0;
      transform: scale(0.3);
    }
    50% {
      opacity: 1;
      transform: scale(1.05);
    }
    70% {
      transform: scale(0.9);
    }
    100% {
      opacity: 1;
      transform: scale(1);
    }
  }

  /* Clases de animación */
  .animate-fadeInUp {
    animation-name: fadeInUp;
    animation-fill-mode: both;
  }

  .animate-fadeInDown {
    animation-name: fadeInDown;
    animation-fill-mode: both;
  }

  .animate-fadeInLeft {
    animation-name: fadeInLeft;
    animation-fill-mode: both;
  }

  .animate-fadeInRight {
    animation-name: fadeInRight;
    animation-fill-mode: both;
  }

  .animate-slideInUp {
    animation-name: slideInUp;
    animation-fill-mode: both;
  }

  .animate-slideInDown {
    animation-name: slideInDown;
    animation-fill-mode: both;
  }

  .animate-zoomIn {
    animation-name: zoomIn;
    animation-fill-mode: both;
  }

  .animate-bounceIn {
    animation-name: bounceIn;
    animation-fill-mode: both;
  }
</style>

<script>
  class ScrollAnimationManager {
    private observers: Map<string, IntersectionObserver> = new Map();

    init() {
      this.cleanup();
      this.setupAnimations();
    }

    cleanup() {
      // Limpiar observers existentes
      this.observers.forEach((observer) => observer.disconnect());
      this.observers.clear();
    }

    setupAnimations() {
  const animateElements = document.querySelectorAll(".scroll-animate");

  // Agrupar elementos por configuración de observer
  const observerGroups = new Map<string, HTMLElement[]>();

  animateElements.forEach((element) => {
    const threshold = element.getAttribute("data-threshold") || "0.1";
    const rootMargin = element.getAttribute("data-root-margin") || "0px 0px -50px 0px";
    const key = `${threshold}|${rootMargin}`; // ✅ clave única y segura

    if (!observerGroups.has(key)) {
      observerGroups.set(key, []);
    }

    observerGroups.get(key)!.push(element as HTMLElement);
  });

  // Crear observer por cada grupo
  observerGroups.forEach((elements, key) => {
    const [thresholdStr, rootMarginStr] = key.split("|"); // ✅ ahora sí
    const observer = this.createObserver(
      parseFloat(thresholdStr),
      rootMarginStr,
    );

    elements.forEach((element) => {
      observer.observe(element);
    });

    this.observers.set(key, observer);
  });
}


    createObserver(
      threshold: number,
      rootMargin: string,
    ): IntersectionObserver {
      return new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const element = entry.target as HTMLElement;
              this.animateElement(element);

              // Si triggerOnce es true, dejar de observar
              const triggerOnce =
                element.getAttribute("data-trigger-once") === "true";
              if (triggerOnce) {
                entry.target.classList.add("animation-complete");
                this.observers.forEach((obs) => obs.unobserve(entry.target));
              }
            }
          });
        },
        {
          threshold,
          rootMargin,
        },
      );
    }

    animateElement(element: HTMLElement) {
      const animation = element.getAttribute("data-animation") || "fadeInUp";
      const delay = element.getAttribute("data-delay") || "0s";
      const duration = element.getAttribute("data-duration") || "0.6s";

      element.style.animationDelay = delay;
      element.style.animationDuration = duration;

      element.classList.add("animate", `animate-${animation}`);
    }
  }

  // Instancia global del manager
  const scrollAnimationManager = new ScrollAnimationManager();

  // Inicializar cuando el DOM esté listo
  document.addEventListener("astro:page-load", () => {
    scrollAnimationManager.init();
  });

  // Reinicializar en navegación SPA de Astro
  document.addEventListener("astro:after-swap", () => {
    scrollAnimationManager.init();
  });

  // Opcional: reinicializar en cambio de tamaño de ventana
  let resizeTimeout: ReturnType<typeof setTimeout>;
  let lastWidth = window.innerWidth;

  window.addEventListener("resize", () => {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(() => {
      const currentWidth = window.innerWidth;
      if (Math.abs(currentWidth - lastWidth) > 200) {
        scrollAnimationManager.init();
        lastWidth = currentWidth;
      }
    }, 300);
  });
</script>
